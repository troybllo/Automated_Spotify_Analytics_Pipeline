x-airflow-common: &airflow-common
  image: apache/airflow:2.8.0
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://spotify_user:spotify_password@postgres/airflow_db
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- spotipy pandas sqlalchemy psycopg2-binary python-dotenv pydantic-settings==2.1.0 loguru}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./app:/opt/airflow/app
    - ./data:/opt/airflow/data
    - ./.env:/opt/airflow/.env
    - ./.spotify_cache:/opt/airflow/.spotify_cache # Add this line!
    - ./airflow/.spotify_cache:/opt/airflow/.spotify_cache
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15-alpine
    container_name: spotify_postgres
    environment:
      POSTGRES_USER: spotify_user
      POSTGRES_PASSWORD: spotify_password
      POSTGRES_MULTIPLE_DATABASES: spotify_analytics,airflow_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/create-multiple-dbs.sh:/docker-entrypoint-initdb.d/multiple-dbs.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spotify_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: spotify_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@spotify.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    user: "0:0"
    volumes:
      - ./airflow:/sources
  dbt:
    build:
      context: ./dbt
      dockerfile: Dockerfile
    container_name: spotify_dbt
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DBT_PROFILES_DIR: /usr/app/dbt
    volumes:
      - ./dbt:/usr/app/dbt
      - ./data:/usr/app/data
    networks:
      - default
    command: tail -f /dev/null

  superset:
    image: apache/superset:latest
    container_name: spotify_superset
    environment:
      - SUPERSET_SECRET_KEY=spotify_secret_key_123
    ports:
      - "8088:8088"
    depends_on:
      - postgres
    volumes:
      - superset_home:/app/superset_home
    networks:
      - default
volumes:
  postgres_data:
  pgadmin_data:
  superset_home:

networks:
  default:
    name: spotify_network
